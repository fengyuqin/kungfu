// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: bull.proto

package tests

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MSGID int32

const (
	MSGID_MsgID_Min                          MSGID = 0
	MSGID_MsgID_ConnClose_Notice             MSGID = 20000
	MSGID_MsgID_Logon_Request                MSGID = 20001
	MSGID_MsgID_Logon_Response               MSGID = 20002
	MSGID_MsgID_HeartBeat_Request            MSGID = 20003
	MSGID_MsgID_HeartBeat_Response           MSGID = 20004
	MSGID_MsgID_JoinRoom_Request             MSGID = 20005
	MSGID_MsgID_JoinRoom_Response            MSGID = 20006
	MSGID_MsgID_LeaveRoom_Request            MSGID = 20007
	MSGID_MsgID_LeaveRoom_Response           MSGID = 20008
	MSGID_MsgID_Login_Player_JoinRoom_Notice MSGID = 20009
	MSGID_MsgID_Betting_Request              MSGID = 20010
	MSGID_MsgID_Betting_Response             MSGID = 20011
	MSGID_MsgID_RoomBetting_Notice           MSGID = 20012
	MSGID_MsgID_RoomSettle_Notice            MSGID = 20013
	MSGID_MsgID_RoomSituation_Request        MSGID = 20014
	MSGID_MsgID_RoomSituation_Response       MSGID = 20015
	MSGID_MsgID_RoomSituation_Notice         MSGID = 20016
	MSGID_MsgID_TableBetting_Notice          MSGID = 20017
	MSGID_MsgID_RoomPlayerList_Request       MSGID = 20018
	MSGID_MsgID_RoomPlayerList_Response      MSGID = 20019
	MSGID_MsgID_UserStakeChange_Notice       MSGID = 20020
	MSGID_MsgID_RoomOnlineList_Request       MSGID = 20021
	MSGID_MsgID_RoomOnlineList_Response      MSGID = 20022
	MSGID_MsgID_RoomStatistic_Request        MSGID = 20023
	MSGID_MsgID_RoomStatistic_Response       MSGID = 20024
	MSGID_MsgID_UserStanding_Request         MSGID = 20025
	MSGID_MsgID_UserStanding_Response        MSGID = 20026
	MSGID_MsgID_UserKickOut_Notice           MSGID = 20027
	MSGID_MsgID_UserStakeLeft_Request        MSGID = 20028
	MSGID_MsgID_UserStakeLeft_Response       MSGID = 20029
	MSGID_MsgID_LeaveRoom_Notice             MSGID = 20030
	MSGID_MsgID_BettingThrow_Request         MSGID = 20031 //续投
	MSGID_MsgID_BettingThrow_Response        MSGID = 20032
)

// Enum value maps for MSGID.
var (
	MSGID_name = map[int32]string{
		0:     "MsgID_Min",
		20000: "MsgID_ConnClose_Notice",
		20001: "MsgID_Logon_Request",
		20002: "MsgID_Logon_Response",
		20003: "MsgID_HeartBeat_Request",
		20004: "MsgID_HeartBeat_Response",
		20005: "MsgID_JoinRoom_Request",
		20006: "MsgID_JoinRoom_Response",
		20007: "MsgID_LeaveRoom_Request",
		20008: "MsgID_LeaveRoom_Response",
		20009: "MsgID_Login_Player_JoinRoom_Notice",
		20010: "MsgID_Betting_Request",
		20011: "MsgID_Betting_Response",
		20012: "MsgID_RoomBetting_Notice",
		20013: "MsgID_RoomSettle_Notice",
		20014: "MsgID_RoomSituation_Request",
		20015: "MsgID_RoomSituation_Response",
		20016: "MsgID_RoomSituation_Notice",
		20017: "MsgID_TableBetting_Notice",
		20018: "MsgID_RoomPlayerList_Request",
		20019: "MsgID_RoomPlayerList_Response",
		20020: "MsgID_UserStakeChange_Notice",
		20021: "MsgID_RoomOnlineList_Request",
		20022: "MsgID_RoomOnlineList_Response",
		20023: "MsgID_RoomStatistic_Request",
		20024: "MsgID_RoomStatistic_Response",
		20025: "MsgID_UserStanding_Request",
		20026: "MsgID_UserStanding_Response",
		20027: "MsgID_UserKickOut_Notice",
		20028: "MsgID_UserStakeLeft_Request",
		20029: "MsgID_UserStakeLeft_Response",
		20030: "MsgID_LeaveRoom_Notice",
		20031: "MsgID_BettingThrow_Request",
		20032: "MsgID_BettingThrow_Response",
	}
	MSGID_value = map[string]int32{
		"MsgID_Min":                          0,
		"MsgID_ConnClose_Notice":             20000,
		"MsgID_Logon_Request":                20001,
		"MsgID_Logon_Response":               20002,
		"MsgID_HeartBeat_Request":            20003,
		"MsgID_HeartBeat_Response":           20004,
		"MsgID_JoinRoom_Request":             20005,
		"MsgID_JoinRoom_Response":            20006,
		"MsgID_LeaveRoom_Request":            20007,
		"MsgID_LeaveRoom_Response":           20008,
		"MsgID_Login_Player_JoinRoom_Notice": 20009,
		"MsgID_Betting_Request":              20010,
		"MsgID_Betting_Response":             20011,
		"MsgID_RoomBetting_Notice":           20012,
		"MsgID_RoomSettle_Notice":            20013,
		"MsgID_RoomSituation_Request":        20014,
		"MsgID_RoomSituation_Response":       20015,
		"MsgID_RoomSituation_Notice":         20016,
		"MsgID_TableBetting_Notice":          20017,
		"MsgID_RoomPlayerList_Request":       20018,
		"MsgID_RoomPlayerList_Response":      20019,
		"MsgID_UserStakeChange_Notice":       20020,
		"MsgID_RoomOnlineList_Request":       20021,
		"MsgID_RoomOnlineList_Response":      20022,
		"MsgID_RoomStatistic_Request":        20023,
		"MsgID_RoomStatistic_Response":       20024,
		"MsgID_UserStanding_Request":         20025,
		"MsgID_UserStanding_Response":        20026,
		"MsgID_UserKickOut_Notice":           20027,
		"MsgID_UserStakeLeft_Request":        20028,
		"MsgID_UserStakeLeft_Response":       20029,
		"MsgID_LeaveRoom_Notice":             20030,
		"MsgID_BettingThrow_Request":         20031,
		"MsgID_BettingThrow_Response":        20032,
	}
)

func (x MSGID) Enum() *MSGID {
	p := new(MSGID)
	*p = x
	return p
}

func (x MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_bull_proto_enumTypes[0].Descriptor()
}

func (MSGID) Type() protoreflect.EnumType {
	return &file_bull_proto_enumTypes[0]
}

func (x MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSGID.Descriptor instead.
func (MSGID) EnumDescriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{0}
}

type RoomStateType int32

const (
	RoomStateType_EnumNotStarted RoomStateType = 0 //未开始游戏
	RoomStateType_EnumWaiting    RoomStateType = 1 //等待开始中
	RoomStateType_EnumBetting    RoomStateType = 2 //下注中
	RoomStateType_EnumShowCard   RoomStateType = 3 //亮牌
)

// Enum value maps for RoomStateType.
var (
	RoomStateType_name = map[int32]string{
		0: "EnumNotStarted",
		1: "EnumWaiting",
		2: "EnumBetting",
		3: "EnumShowCard",
	}
	RoomStateType_value = map[string]int32{
		"EnumNotStarted": 0,
		"EnumWaiting":    1,
		"EnumBetting":    2,
		"EnumShowCard":   3,
	}
)

func (x RoomStateType) Enum() *RoomStateType {
	p := new(RoomStateType)
	*p = x
	return p
}

func (x RoomStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_bull_proto_enumTypes[1].Descriptor()
}

func (RoomStateType) Type() protoreflect.EnumType {
	return &file_bull_proto_enumTypes[1]
}

func (x RoomStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStateType.Descriptor instead.
func (RoomStateType) EnumDescriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{1}
}

type TableBettingType int32

const (
	TableBettingType_EnumNone      TableBettingType = 0
	TableBettingType_EnumCowboyWin TableBettingType = 1  //牛仔胜-1
	TableBettingType_EnumBullWin   TableBettingType = 2  //公牛胜-2
	TableBettingType_EnumBreakEven TableBettingType = 3  //打成平手-3
	TableBettingType_EnumWinOne    TableBettingType = 4  //获胜牌型-高牌/一对-4
	TableBettingType_EnumWinTwo    TableBettingType = 5  //获胜牌型-两对-5
	TableBettingType_EnumWinThree  TableBettingType = 6  //获胜牌型-三条/顺子/同花-6
	TableBettingType_EnumWinFour   TableBettingType = 7  //获胜牌型-葫芦-7
	TableBettingType_EnumWinFive   TableBettingType = 8  //获胜牌型-金刚/同花顺/皇同-8
	TableBettingType_EnumHandOne   TableBettingType = 9  //任意手牌-同花/连牌/同花连牌-9
	TableBettingType_EnumHandTwo   TableBettingType = 10 //任意手牌-对子-10
	TableBettingType_EnumHandThree TableBettingType = 11 //任意手牌-对A-11
	TableBettingType_EnumBullPair  TableBettingType = 12 //公牛对2或者高牌赢-12
)

// Enum value maps for TableBettingType.
var (
	TableBettingType_name = map[int32]string{
		0:  "EnumNone",
		1:  "EnumCowboyWin",
		2:  "EnumBullWin",
		3:  "EnumBreakEven",
		4:  "EnumWinOne",
		5:  "EnumWinTwo",
		6:  "EnumWinThree",
		7:  "EnumWinFour",
		8:  "EnumWinFive",
		9:  "EnumHandOne",
		10: "EnumHandTwo",
		11: "EnumHandThree",
		12: "EnumBullPair",
	}
	TableBettingType_value = map[string]int32{
		"EnumNone":      0,
		"EnumCowboyWin": 1,
		"EnumBullWin":   2,
		"EnumBreakEven": 3,
		"EnumWinOne":    4,
		"EnumWinTwo":    5,
		"EnumWinThree":  6,
		"EnumWinFour":   7,
		"EnumWinFive":   8,
		"EnumHandOne":   9,
		"EnumHandTwo":   10,
		"EnumHandThree": 11,
		"EnumBullPair":  12,
	}
)

func (x TableBettingType) Enum() *TableBettingType {
	p := new(TableBettingType)
	*p = x
	return p
}

func (x TableBettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableBettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_bull_proto_enumTypes[2].Descriptor()
}

func (TableBettingType) Type() protoreflect.EnumType {
	return &file_bull_proto_enumTypes[2]
}

func (x TableBettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableBettingType.Descriptor instead.
func (TableBettingType) EnumDescriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{2}
}

type TableCardType int32

const (
	TableCardType_CardNone               TableCardType = 0  //无
	TableCardType_CardHigh               TableCardType = 1  //高牌
	TableCardType_CardPair               TableCardType = 2  //一对
	TableCardType_CardPairTwo            TableCardType = 3  //两对
	TableCardType_CardThreeKind          TableCardType = 4  //三条
	TableCardType_CardStraight           TableCardType = 5  //顺子
	TableCardType_CardSameColor          TableCardType = 6  //同花
	TableCardType_CardGourd              TableCardType = 7  //葫芦
	TableCardType_CardFourKind           TableCardType = 8  //四条
	TableCardType_CardStraightFlush      TableCardType = 9  //同花顺
	TableCardType_CardRoyalStraightFlush TableCardType = 10 //皇家同花顺
)

// Enum value maps for TableCardType.
var (
	TableCardType_name = map[int32]string{
		0:  "CardNone",
		1:  "CardHigh",
		2:  "CardPair",
		3:  "CardPairTwo",
		4:  "CardThreeKind",
		5:  "CardStraight",
		6:  "CardSameColor",
		7:  "CardGourd",
		8:  "CardFourKind",
		9:  "CardStraightFlush",
		10: "CardRoyalStraightFlush",
	}
	TableCardType_value = map[string]int32{
		"CardNone":               0,
		"CardHigh":               1,
		"CardPair":               2,
		"CardPairTwo":            3,
		"CardThreeKind":          4,
		"CardStraight":           5,
		"CardSameColor":          6,
		"CardGourd":              7,
		"CardFourKind":           8,
		"CardStraightFlush":      9,
		"CardRoyalStraightFlush": 10,
	}
)

func (x TableCardType) Enum() *TableCardType {
	p := new(TableCardType)
	*p = x
	return p
}

func (x TableCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_bull_proto_enumTypes[3].Descriptor()
}

func (TableCardType) Type() protoreflect.EnumType {
	return &file_bull_proto_enumTypes[3]
}

func (x TableCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableCardType.Descriptor instead.
func (TableCardType) EnumDescriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{3}
}

type RoomUserType int32

const (
	RoomUserType_UserOther       RoomUserType = 0 //其他用户
	RoomUserType_UserSelf        RoomUserType = 1 //用户自己
	RoomUserType_UserBigWin      RoomUserType = 2 //大赢家用户
	RoomUserType_UserGodOperator RoomUserType = 3 //神算子用户
)

// Enum value maps for RoomUserType.
var (
	RoomUserType_name = map[int32]string{
		0: "UserOther",
		1: "UserSelf",
		2: "UserBigWin",
		3: "UserGodOperator",
	}
	RoomUserType_value = map[string]int32{
		"UserOther":       0,
		"UserSelf":        1,
		"UserBigWin":      2,
		"UserGodOperator": 3,
	}
)

func (x RoomUserType) Enum() *RoomUserType {
	p := new(RoomUserType)
	*p = x
	return p
}

func (x RoomUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_bull_proto_enumTypes[4].Descriptor()
}

func (RoomUserType) Type() protoreflect.EnumType {
	return &file_bull_proto_enumTypes[4]
}

func (x RoomUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomUserType.Descriptor instead.
func (RoomUserType) EnumDescriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{4}
}

type RequestBettingThrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestBettingThrow) Reset() {
	*x = RequestBettingThrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBettingThrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBettingThrow) ProtoMessage() {}

func (x *RequestBettingThrow) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBettingThrow.ProtoReflect.Descriptor instead.
func (*RequestBettingThrow) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{0}
}

func (x *RequestBettingThrow) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseBettingThrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseBettingThrow) Reset() {
	*x = ResponseBettingThrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBettingThrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBettingThrow) ProtoMessage() {}

func (x *ResponseBettingThrow) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBettingThrow.ProtoReflect.Descriptor instead.
func (*ResponseBettingThrow) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseBettingThrow) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type NoticeLeaveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *NoticeLeaveRoom) Reset() {
	*x = NoticeLeaveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeLeaveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeLeaveRoom) ProtoMessage() {}

func (x *NoticeLeaveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeLeaveRoom.ProtoReflect.Descriptor instead.
func (*NoticeLeaveRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{2}
}

func (x *NoticeLeaveRoom) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type RequestUserStakeLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *RequestUserStakeLeft) Reset() {
	*x = RequestUserStakeLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUserStakeLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUserStakeLeft) ProtoMessage() {}

func (x *RequestUserStakeLeft) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUserStakeLeft.ProtoReflect.Descriptor instead.
func (*RequestUserStakeLeft) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{3}
}

func (x *RequestUserStakeLeft) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ResponseUserStakeLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	LeftStake int32 `protobuf:"varint,2,opt,name=left_stake,json=leftStake,proto3" json:"left_stake,omitempty"`
}

func (x *ResponseUserStakeLeft) Reset() {
	*x = ResponseUserStakeLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUserStakeLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUserStakeLeft) ProtoMessage() {}

func (x *ResponseUserStakeLeft) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUserStakeLeft.ProtoReflect.Descriptor instead.
func (*ResponseUserStakeLeft) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseUserStakeLeft) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseUserStakeLeft) GetLeftStake() int32 {
	if x != nil {
		return x.LeftStake
	}
	return 0
}

type NoticeUserKickOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"` //房间ID
	Uid    int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`       //用户ID
}

func (x *NoticeUserKickOut) Reset() {
	*x = NoticeUserKickOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUserKickOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUserKickOut) ProtoMessage() {}

func (x *NoticeUserKickOut) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUserKickOut.ProtoReflect.Descriptor instead.
func (*NoticeUserKickOut) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{5}
}

func (x *NoticeUserKickOut) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeUserKickOut) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type NoticeUserStakeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                              //用户ID
	LeftStake int32 `protobuf:"varint,2,opt,name=left_stake,json=leftStake,proto3" json:"left_stake,omitempty"` //剩余筹码
}

func (x *NoticeUserStakeChange) Reset() {
	*x = NoticeUserStakeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeUserStakeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeUserStakeChange) ProtoMessage() {}

func (x *NoticeUserStakeChange) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeUserStakeChange.ProtoReflect.Descriptor instead.
func (*NoticeUserStakeChange) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{6}
}

func (x *NoticeUserStakeChange) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoticeUserStakeChange) GetLeftStake() int32 {
	if x != nil {
		return x.LeftStake
	}
	return 0
}

type StatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUuid    uint64        `protobuf:"varint,1,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`
	CowBodyWin  int32         `protobuf:"varint,2,opt,name=cow_body_win,json=cowBodyWin,proto3" json:"cow_body_win,omitempty"`
	BullWin     int32         `protobuf:"varint,3,opt,name=bull_win,json=bullWin,proto3" json:"bull_win,omitempty"`
	BreakEven   int32         `protobuf:"varint,4,opt,name=break_even,json=breakEven,proto3" json:"break_even,omitempty"`
	WinOne      int32         `protobuf:"varint,5,opt,name=win_one,json=winOne,proto3" json:"win_one,omitempty"`
	WinTwo      int32         `protobuf:"varint,6,opt,name=win_two,json=winTwo,proto3" json:"win_two,omitempty"`
	WinThree    int32         `protobuf:"varint,7,opt,name=win_three,json=winThree,proto3" json:"win_three,omitempty"`
	WinFour     int32         `protobuf:"varint,8,opt,name=win_four,json=winFour,proto3" json:"win_four,omitempty"`
	WinFive     int32         `protobuf:"varint,9,opt,name=win_five,json=winFive,proto3" json:"win_five,omitempty"`
	HandOne     int32         `protobuf:"varint,10,opt,name=hand_one,json=handOne,proto3" json:"hand_one,omitempty"`
	HandTwo     int32         `protobuf:"varint,11,opt,name=hand_two,json=handTwo,proto3" json:"hand_two,omitempty"`
	HandThree   int32         `protobuf:"varint,12,opt,name=hand_three,json=handThree,proto3" json:"hand_three,omitempty"`
	BullPair    int32         `protobuf:"varint,13,opt,name=bull_pair,json=bullPair,proto3" json:"bull_pair,omitempty"`
	Winner      int32         `protobuf:"varint,14,opt,name=winner,proto3" json:"winner,omitempty"` //获胜方 0-无结果 1-牛仔胜 2-公牛胜 3-平手
	WinCardType TableCardType `protobuf:"varint,15,opt,name=win_card_type,json=winCardType,proto3,enum=protocol.TableCardType" json:"win_card_type,omitempty"`
}

func (x *StatInfo) Reset() {
	*x = StatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatInfo) ProtoMessage() {}

func (x *StatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatInfo.ProtoReflect.Descriptor instead.
func (*StatInfo) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{7}
}

func (x *StatInfo) GetGameUuid() uint64 {
	if x != nil {
		return x.GameUuid
	}
	return 0
}

func (x *StatInfo) GetCowBodyWin() int32 {
	if x != nil {
		return x.CowBodyWin
	}
	return 0
}

func (x *StatInfo) GetBullWin() int32 {
	if x != nil {
		return x.BullWin
	}
	return 0
}

func (x *StatInfo) GetBreakEven() int32 {
	if x != nil {
		return x.BreakEven
	}
	return 0
}

func (x *StatInfo) GetWinOne() int32 {
	if x != nil {
		return x.WinOne
	}
	return 0
}

func (x *StatInfo) GetWinTwo() int32 {
	if x != nil {
		return x.WinTwo
	}
	return 0
}

func (x *StatInfo) GetWinThree() int32 {
	if x != nil {
		return x.WinThree
	}
	return 0
}

func (x *StatInfo) GetWinFour() int32 {
	if x != nil {
		return x.WinFour
	}
	return 0
}

func (x *StatInfo) GetWinFive() int32 {
	if x != nil {
		return x.WinFive
	}
	return 0
}

func (x *StatInfo) GetHandOne() int32 {
	if x != nil {
		return x.HandOne
	}
	return 0
}

func (x *StatInfo) GetHandTwo() int32 {
	if x != nil {
		return x.HandTwo
	}
	return 0
}

func (x *StatInfo) GetHandThree() int32 {
	if x != nil {
		return x.HandThree
	}
	return 0
}

func (x *StatInfo) GetBullPair() int32 {
	if x != nil {
		return x.BullPair
	}
	return 0
}

func (x *StatInfo) GetWinner() int32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

func (x *StatInfo) GetWinCardType() TableCardType {
	if x != nil {
		return x.WinCardType
	}
	return TableCardType_CardNone
}

type RequestUserStanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"` //房间id
	Uid    int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`       //用户id
}

func (x *RequestUserStanding) Reset() {
	*x = RequestUserStanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUserStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUserStanding) ProtoMessage() {}

func (x *RequestUserStanding) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUserStanding.ProtoReflect.Descriptor instead.
func (*RequestUserStanding) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{8}
}

func (x *RequestUserStanding) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *RequestUserStanding) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ResponseUserStanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	List  []*StandingStat `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //最近10轮数据
}

func (x *ResponseUserStanding) Reset() {
	*x = ResponseUserStanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUserStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUserStanding) ProtoMessage() {}

func (x *ResponseUserStanding) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUserStanding.ProtoReflect.Descriptor instead.
func (*ResponseUserStanding) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseUserStanding) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseUserStanding) GetList() []*StandingStat {
	if x != nil {
		return x.List
	}
	return nil
}

type StandingUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BettingType  TableBettingType `protobuf:"varint,1,opt,name=betting_type,json=bettingType,proto3,enum=protocol.TableBettingType" json:"betting_type,omitempty"` //下注类型
	BettingMoney int32            `protobuf:"varint,2,opt,name=betting_money,json=bettingMoney,proto3" json:"betting_money,omitempty"`                             //下注金额
	PayMoney     int32            `protobuf:"varint,3,opt,name=pay_money,json=payMoney,proto3" json:"pay_money,omitempty"`                                         //赔付金额
}

func (x *StandingUnit) Reset() {
	*x = StandingUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandingUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandingUnit) ProtoMessage() {}

func (x *StandingUnit) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandingUnit.ProtoReflect.Descriptor instead.
func (*StandingUnit) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{10}
}

func (x *StandingUnit) GetBettingType() TableBettingType {
	if x != nil {
		return x.BettingType
	}
	return TableBettingType_EnumNone
}

func (x *StandingUnit) GetBettingMoney() int32 {
	if x != nil {
		return x.BettingMoney
	}
	return 0
}

func (x *StandingUnit) GetPayMoney() int32 {
	if x != nil {
		return x.PayMoney
	}
	return 0
}

type StandingStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid       int32           `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`                                //房间id
	Uid          int32           `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                                      //用户id
	GameUuid     uint64          `protobuf:"varint,3,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`            //牌局uuid
	BetMoney     int32           `protobuf:"varint,4,opt,name=bet_money,json=betMoney,proto3" json:"bet_money,omitempty"`            //下注总金额
	PayMoney     int32           `protobuf:"varint,5,opt,name=pay_money,json=payMoney,proto3" json:"pay_money,omitempty"`            //赔付总金额
	WinState     int32           `protobuf:"varint,6,opt,name=win_state,json=winState,proto3" json:"win_state,omitempty"`            //获胜状态 1-获胜 0-未获胜
	StandingList []*StandingUnit `protobuf:"bytes,7,rep,name=standing_list,json=standingList,proto3" json:"standing_list,omitempty"` //下注单元战绩详情
}

func (x *StandingStat) Reset() {
	*x = StandingStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandingStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandingStat) ProtoMessage() {}

func (x *StandingStat) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandingStat.ProtoReflect.Descriptor instead.
func (*StandingStat) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{11}
}

func (x *StandingStat) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *StandingStat) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *StandingStat) GetGameUuid() uint64 {
	if x != nil {
		return x.GameUuid
	}
	return 0
}

func (x *StandingStat) GetBetMoney() int32 {
	if x != nil {
		return x.BetMoney
	}
	return 0
}

func (x *StandingStat) GetPayMoney() int32 {
	if x != nil {
		return x.PayMoney
	}
	return 0
}

func (x *StandingStat) GetWinState() int32 {
	if x != nil {
		return x.WinState
	}
	return 0
}

func (x *StandingStat) GetStandingList() []*StandingUnit {
	if x != nil {
		return x.StandingList
	}
	return nil
}

type RequestRoomStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestRoomStatistic) Reset() {
	*x = RequestRoomStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRoomStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRoomStatistic) ProtoMessage() {}

func (x *RequestRoomStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRoomStatistic.ProtoReflect.Descriptor instead.
func (*RequestRoomStatistic) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{12}
}

func (x *RequestRoomStatistic) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseRoomStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        int32             `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	BookingSheet *RoomBookingSheet `protobuf:"bytes,2,opt,name=booking_sheet,json=bookingSheet,proto3" json:"booking_sheet,omitempty"` //路单
	StatInfo     *StatInfo         `protobuf:"bytes,3,opt,name=stat_info,json=statInfo,proto3" json:"stat_info,omitempty"`             //最近1000手统计数据
}

func (x *ResponseRoomStatistic) Reset() {
	*x = ResponseRoomStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRoomStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRoomStatistic) ProtoMessage() {}

func (x *ResponseRoomStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRoomStatistic.ProtoReflect.Descriptor instead.
func (*ResponseRoomStatistic) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseRoomStatistic) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseRoomStatistic) GetBookingSheet() *RoomBookingSheet {
	if x != nil {
		return x.BookingSheet
	}
	return nil
}

func (x *ResponseRoomStatistic) GetStatInfo() *StatInfo {
	if x != nil {
		return x.StatInfo
	}
	return nil
}

type WinCol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num    int32   `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`          //长度
	List   []int32 `protobuf:"varint,2,rep,packed,name=list,proto3" json:"list,omitempty"` //数组
	Winner int32   `protobuf:"varint,3,opt,name=winner,proto3" json:"winner,omitempty"`    //有效输赢，平局算到公牛或者牛仔赢，所以值为1或者2
}

func (x *WinCol) Reset() {
	*x = WinCol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinCol) ProtoMessage() {}

func (x *WinCol) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinCol.ProtoReflect.Descriptor instead.
func (*WinCol) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{14}
}

func (x *WinCol) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WinCol) GetList() []int32 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WinCol) GetWinner() int32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

type TableCardStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winner      int32         `protobuf:"varint,1,opt,name=winner,proto3" json:"winner,omitempty"`                                                            //输赢
	WinCardType TableCardType `protobuf:"varint,2,opt,name=win_card_type,json=winCardType,proto3,enum=protocol.TableCardType" json:"win_card_type,omitempty"` //牌型
}

func (x *TableCardStat) Reset() {
	*x = TableCardStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCardStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCardStat) ProtoMessage() {}

func (x *TableCardStat) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCardStat.ProtoReflect.Descriptor instead.
func (*TableCardStat) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{15}
}

func (x *TableCardStat) GetWinner() int32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

func (x *TableCardStat) GetWinCardType() TableCardType {
	if x != nil {
		return x.WinCardType
	}
	return TableCardType_CardNone
}

type WinCardCol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  int32            `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`  //长度
	List []*TableCardStat `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //数组
}

func (x *WinCardCol) Reset() {
	*x = WinCardCol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinCardCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinCardCol) ProtoMessage() {}

func (x *WinCardCol) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinCardCol.ProtoReflect.Descriptor instead.
func (*WinCardCol) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{16}
}

func (x *WinCardCol) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WinCardCol) GetList() []*TableCardStat {
	if x != nil {
		return x.List
	}
	return nil
}

type RequestRoomOnlineList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestRoomOnlineList) Reset() {
	*x = RequestRoomOnlineList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRoomOnlineList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRoomOnlineList) ProtoMessage() {}

func (x *RequestRoomOnlineList) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRoomOnlineList.ProtoReflect.Descriptor instead.
func (*RequestRoomOnlineList) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{17}
}

func (x *RequestRoomOnlineList) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseRoomOnlineList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      int32         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	OnlineNum  int32         `protobuf:"varint,2,opt,name=online_num,json=onlineNum,proto3" json:"online_num,omitempty"`   //在线人数
	OnlineList []*PlayerInfo `protobuf:"bytes,3,rep,name=online_list,json=onlineList,proto3" json:"online_list,omitempty"` //在线列表
}

func (x *ResponseRoomOnlineList) Reset() {
	*x = ResponseRoomOnlineList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRoomOnlineList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRoomOnlineList) ProtoMessage() {}

func (x *ResponseRoomOnlineList) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRoomOnlineList.ProtoReflect.Descriptor instead.
func (*ResponseRoomOnlineList) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseRoomOnlineList) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseRoomOnlineList) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *ResponseRoomOnlineList) GetOnlineList() []*PlayerInfo {
	if x != nil {
		return x.OnlineList
	}
	return nil
}

type RequestRoomPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestRoomPlayerList) Reset() {
	*x = RequestRoomPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRoomPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRoomPlayerList) ProtoMessage() {}

func (x *RequestRoomPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRoomPlayerList.ProtoReflect.Descriptor instead.
func (*RequestRoomPlayerList) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{19}
}

func (x *RequestRoomPlayerList) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseRoomPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        int32         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	BigWinPlayer []*PlayerInfo `protobuf:"bytes,2,rep,name=big_win_player,json=bigWinPlayer,proto3" json:"big_win_player,omitempty"` //大赢家用户
	GodOperator  []*PlayerInfo `protobuf:"bytes,3,rep,name=god_operator,json=godOperator,proto3" json:"god_operator,omitempty"`      //神算子用户
	SelfInfo     *PlayerInfo   `protobuf:"bytes,4,opt,name=self_info,json=selfInfo,proto3" json:"self_info,omitempty"`               //用户自己信息
}

func (x *ResponseRoomPlayerList) Reset() {
	*x = ResponseRoomPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRoomPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRoomPlayerList) ProtoMessage() {}

func (x *ResponseRoomPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRoomPlayerList.ProtoReflect.Descriptor instead.
func (*ResponseRoomPlayerList) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseRoomPlayerList) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseRoomPlayerList) GetBigWinPlayer() []*PlayerInfo {
	if x != nil {
		return x.BigWinPlayer
	}
	return nil
}

func (x *ResponseRoomPlayerList) GetGodOperator() []*PlayerInfo {
	if x != nil {
		return x.GodOperator
	}
	return nil
}

func (x *ResponseRoomPlayerList) GetSelfInfo() *PlayerInfo {
	if x != nil {
		return x.SelfInfo
	}
	return nil
}

type NoticeTableBetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid          int32               `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	BigWinList      []*TableBettingItem `protobuf:"bytes,2,rep,name=big_win_list,json=bigWinList,proto3" json:"big_win_list,omitempty"`                //大赢家下注列表
	GodOperatorList []*TableBettingItem `protobuf:"bytes,3,rep,name=god_operator_list,json=godOperatorList,proto3" json:"god_operator_list,omitempty"` //神算子下注列表
	OtherList       []*TableBettingItem `protobuf:"bytes,4,rep,name=other_list,json=otherList,proto3" json:"other_list,omitempty"`                     //其他人下注列表
	OtherTotal      int32               `protobuf:"varint,5,opt,name=other_total,json=otherTotal,proto3" json:"other_total,omitempty"`                 //其他人总下注额
	SelfInRank      bool                `protobuf:"varint,6,opt,name=self_in_rank,json=selfInRank,proto3" json:"self_in_rank,omitempty"`               //自己是否在排行列表-富豪榜或者神算子中，不在包含在other_list
	SelfList        *TableBettingItem   `protobuf:"bytes,7,opt,name=self_list,json=selfList,proto3" json:"self_list,omitempty"`                        //用户自己下注列表
}

func (x *NoticeTableBetting) Reset() {
	*x = NoticeTableBetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeTableBetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeTableBetting) ProtoMessage() {}

func (x *NoticeTableBetting) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeTableBetting.ProtoReflect.Descriptor instead.
func (*NoticeTableBetting) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{21}
}

func (x *NoticeTableBetting) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeTableBetting) GetBigWinList() []*TableBettingItem {
	if x != nil {
		return x.BigWinList
	}
	return nil
}

func (x *NoticeTableBetting) GetGodOperatorList() []*TableBettingItem {
	if x != nil {
		return x.GodOperatorList
	}
	return nil
}

func (x *NoticeTableBetting) GetOtherList() []*TableBettingItem {
	if x != nil {
		return x.OtherList
	}
	return nil
}

func (x *NoticeTableBetting) GetOtherTotal() int32 {
	if x != nil {
		return x.OtherTotal
	}
	return 0
}

func (x *NoticeTableBetting) GetSelfInRank() bool {
	if x != nil {
		return x.SelfInRank
	}
	return false
}

func (x *NoticeTableBetting) GetSelfList() *TableBettingItem {
	if x != nil {
		return x.SelfList
	}
	return nil
}

type TableBettingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int32                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                       //下注用户
	Total   int32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                   //下注总额
	BetList []*TableBettingDetail `protobuf:"bytes,3,rep,name=bet_list,json=betList,proto3" json:"bet_list,omitempty"` //下注列表
	Rank    int32                 `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                     //排行-结算和下注里面用到-其他不用管
}

func (x *TableBettingItem) Reset() {
	*x = TableBettingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableBettingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableBettingItem) ProtoMessage() {}

func (x *TableBettingItem) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableBettingItem.ProtoReflect.Descriptor instead.
func (*TableBettingItem) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{22}
}

func (x *TableBettingItem) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TableBettingItem) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TableBettingItem) GetBetList() []*TableBettingDetail {
	if x != nil {
		return x.BetList
	}
	return nil
}

func (x *TableBettingItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type TableBettingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           TableBettingType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.TableBettingType" json:"type,omitempty"`              //下注类型
	Amount         int32            `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                         //下注金额
	IsBettingThrow bool             `protobuf:"varint,3,opt,name=is_betting_throw,json=isBettingThrow,proto3" json:"is_betting_throw,omitempty"` //是否是续投
}

func (x *TableBettingDetail) Reset() {
	*x = TableBettingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableBettingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableBettingDetail) ProtoMessage() {}

func (x *TableBettingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableBettingDetail.ProtoReflect.Descriptor instead.
func (*TableBettingDetail) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{23}
}

func (x *TableBettingDetail) GetType() TableBettingType {
	if x != nil {
		return x.Type
	}
	return TableBettingType_EnumNone
}

func (x *TableBettingDetail) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TableBettingDetail) GetIsBettingThrow() bool {
	if x != nil {
		return x.IsBettingThrow
	}
	return false
}

type RequestRoomSituation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestRoomSituation) Reset() {
	*x = RequestRoomSituation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRoomSituation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRoomSituation) ProtoMessage() {}

func (x *RequestRoomSituation) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRoomSituation.ProtoReflect.Descriptor instead.
func (*RequestRoomSituation) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{24}
}

func (x *RequestRoomSituation) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseRoomSituation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseRoomSituation) Reset() {
	*x = ResponseRoomSituation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRoomSituation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRoomSituation) ProtoMessage() {}

func (x *ResponseRoomSituation) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRoomSituation.ProtoReflect.Descriptor instead.
func (*ResponseRoomSituation) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{25}
}

func (x *ResponseRoomSituation) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type TableBettingUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BettingType  TableBettingType `protobuf:"varint,1,opt,name=betting_type,json=bettingType,proto3,enum=protocol.TableBettingType" json:"betting_type,omitempty"`
	Multiple     int32            `protobuf:"varint,2,opt,name=multiple,proto3" json:"multiple,omitempty"`
	BettingTotal int32            `protobuf:"varint,3,opt,name=betting_total,json=bettingTotal,proto3" json:"betting_total,omitempty"`
	BettingSelf  int32            `protobuf:"varint,4,opt,name=betting_self,json=bettingSelf,proto3" json:"betting_self,omitempty"`
	BettingLost  int32            `protobuf:"varint,5,opt,name=betting_lost,json=bettingLost,proto3" json:"betting_lost,omitempty"`
	BettingStats []int32          `protobuf:"varint,6,rep,packed,name=betting_stats,json=bettingStats,proto3" json:"betting_stats,omitempty"` //统计输赢结果，最大12 0-未中 1-中
}

func (x *TableBettingUnit) Reset() {
	*x = TableBettingUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableBettingUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableBettingUnit) ProtoMessage() {}

func (x *TableBettingUnit) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableBettingUnit.ProtoReflect.Descriptor instead.
func (*TableBettingUnit) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{26}
}

func (x *TableBettingUnit) GetBettingType() TableBettingType {
	if x != nil {
		return x.BettingType
	}
	return TableBettingType_EnumNone
}

func (x *TableBettingUnit) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *TableBettingUnit) GetBettingTotal() int32 {
	if x != nil {
		return x.BettingTotal
	}
	return 0
}

func (x *TableBettingUnit) GetBettingSelf() int32 {
	if x != nil {
		return x.BettingSelf
	}
	return 0
}

func (x *TableBettingUnit) GetBettingLost() int32 {
	if x != nil {
		return x.BettingLost
	}
	return 0
}

func (x *TableBettingUnit) GetBettingStats() []int32 {
	if x != nil {
		return x.BettingStats
	}
	return nil
}

type RoomTimeSeconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitSeconds int32 `protobuf:"varint,1,opt,name=wait_seconds,json=waitSeconds,proto3" json:"wait_seconds,omitempty"` //等待开始时间
	BetSeconds  int32 `protobuf:"varint,2,opt,name=bet_seconds,json=betSeconds,proto3" json:"bet_seconds,omitempty"`    //等待下注时间
	ShowSeconds int32 `protobuf:"varint,3,opt,name=show_seconds,json=showSeconds,proto3" json:"show_seconds,omitempty"` //显示牌型时间
}

func (x *RoomTimeSeconds) Reset() {
	*x = RoomTimeSeconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomTimeSeconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomTimeSeconds) ProtoMessage() {}

func (x *RoomTimeSeconds) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomTimeSeconds.ProtoReflect.Descriptor instead.
func (*RoomTimeSeconds) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{27}
}

func (x *RoomTimeSeconds) GetWaitSeconds() int32 {
	if x != nil {
		return x.WaitSeconds
	}
	return 0
}

func (x *RoomTimeSeconds) GetBetSeconds() int32 {
	if x != nil {
		return x.BetSeconds
	}
	return 0
}

func (x *RoomTimeSeconds) GetShowSeconds() int32 {
	if x != nil {
		return x.ShowSeconds
	}
	return 0
}

type RoomBookingSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopList   []int32       `protobuf:"varint,1,rep,packed,name=top_list,json=topList,proto3" json:"top_list,omitempty"` //顶部数据-20条
	LeftList  []*WinCardCol `protobuf:"bytes,2,rep,name=left_list,json=leftList,proto3" json:"left_list,omitempty"`      //左部数据-8列-每列6条
	RightList []*WinCol     `protobuf:"bytes,3,rep,name=right_list,json=rightList,proto3" json:"right_list,omitempty"`   //右部数据-15列-每列6条(可能超过，平局算到当前蓝方或者红方的列中)
}

func (x *RoomBookingSheet) Reset() {
	*x = RoomBookingSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBookingSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBookingSheet) ProtoMessage() {}

func (x *RoomBookingSheet) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBookingSheet.ProtoReflect.Descriptor instead.
func (*RoomBookingSheet) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{28}
}

func (x *RoomBookingSheet) GetTopList() []int32 {
	if x != nil {
		return x.TopList
	}
	return nil
}

func (x *RoomBookingSheet) GetLeftList() []*WinCardCol {
	if x != nil {
		return x.LeftList
	}
	return nil
}

func (x *RoomBookingSheet) GetRightList() []*WinCol {
	if x != nil {
		return x.RightList
	}
	return nil
}

type NoticeRoomSituation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid             int32               `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	State              RoomStateType       `protobuf:"varint,2,opt,name=state,proto3,enum=protocol.RoomStateType" json:"state,omitempty"`
	BettingList        []*TableBettingUnit `protobuf:"bytes,3,rep,name=betting_list,json=bettingList,proto3" json:"betting_list,omitempty"`
	CardItems          *TableCardsItems    `protobuf:"bytes,4,opt,name=card_items,json=cardItems,proto3" json:"card_items,omitempty"`                                                          //发牌信息
	TimeSeconds        *RoomTimeSeconds    `protobuf:"bytes,5,opt,name=time_seconds,json=timeSeconds,proto3" json:"time_seconds,omitempty"`                                                    //时间规则
	NextSeconds        int64               `protobuf:"varint,6,opt,name=next_seconds,json=nextSeconds,proto3" json:"next_seconds,omitempty"`                                                   //距离下个操作剩余时间,单位s
	Winner             int32               `protobuf:"varint,7,opt,name=winner,proto3" json:"winner,omitempty"`                                                                                //获胜方 0-无结果 1-牛仔胜 2-公牛胜 3-平手
	CowboyCardType     TableCardType       `protobuf:"varint,8,opt,name=cowboy_card_type,json=cowboyCardType,proto3,enum=protocol.TableCardType" json:"cowboy_card_type,omitempty"`            //牛仔牌型
	BullCardType       TableCardType       `protobuf:"varint,9,opt,name=bull_card_type,json=bullCardType,proto3,enum=protocol.TableCardType" json:"bull_card_type,omitempty"`                  //公牛牌型
	WinBettingType     []TableBettingType  `protobuf:"varint,10,rep,packed,name=win_betting_type,json=winBettingType,proto3,enum=protocol.TableBettingType" json:"win_betting_type,omitempty"` //获胜押注单元
	BigWinPlayer       []*PlayerInfo       `protobuf:"bytes,11,rep,name=big_win_player,json=bigWinPlayer,proto3" json:"big_win_player,omitempty"`                                              //大赢家用户
	GodOperator        []*PlayerInfo       `protobuf:"bytes,12,rep,name=god_operator,json=godOperator,proto3" json:"god_operator,omitempty"`                                                   //神算子用户
	SelfInfo           *PlayerInfo         `protobuf:"bytes,13,opt,name=self_info,json=selfInfo,proto3" json:"self_info,omitempty"`                                                            //用户自己信息
	BigWinSettles      []*PlayerSettle     `protobuf:"bytes,14,rep,name=big_win_settles,json=bigWinSettles,proto3" json:"big_win_settles,omitempty"`
	GodOperatorSettles []*PlayerSettle     `protobuf:"bytes,15,rep,name=god_operator_settles,json=godOperatorSettles,proto3" json:"god_operator_settles,omitempty"`
	SelfSettle         *PlayerSettle       `protobuf:"bytes,16,opt,name=self_settle,json=selfSettle,proto3" json:"self_settle,omitempty"`
	OtherSettle        *PlayerSettle       `protobuf:"bytes,17,opt,name=other_settle,json=otherSettle,proto3" json:"other_settle,omitempty"`
	TopList            []int32             `protobuf:"varint,18,rep,packed,name=top_list,json=topList,proto3" json:"top_list,omitempty"`                    //顶部数据-12条
	BaseScore          int32               `protobuf:"varint,19,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`                     //底分
	BullPairCancel     bool                `protobuf:"varint,20,opt,name=bull_pair_cancel,json=bullPairCancel,proto3" json:"bull_pair_cancel,omitempty"`    //是否取消对2赔率
	CanBettingThrow    bool                `protobuf:"varint,21,opt,name=can_betting_throw,json=canBettingThrow,proto3" json:"can_betting_throw,omitempty"` //能否续投
	MaxBetDownTen      int32               `protobuf:"varint,22,opt,name=max_bet_down_ten,json=maxBetDownTen,proto3" json:"max_bet_down_ten,omitempty"`     //10倍以下单元下注限额
	MaxBetUpTen        int32               `protobuf:"varint,23,opt,name=max_bet_up_ten,json=maxBetUpTen,proto3" json:"max_bet_up_ten,omitempty"`           //10倍及以上单元下注限额
}

func (x *NoticeRoomSituation) Reset() {
	*x = NoticeRoomSituation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeRoomSituation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeRoomSituation) ProtoMessage() {}

func (x *NoticeRoomSituation) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeRoomSituation.ProtoReflect.Descriptor instead.
func (*NoticeRoomSituation) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{29}
}

func (x *NoticeRoomSituation) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeRoomSituation) GetState() RoomStateType {
	if x != nil {
		return x.State
	}
	return RoomStateType_EnumNotStarted
}

func (x *NoticeRoomSituation) GetBettingList() []*TableBettingUnit {
	if x != nil {
		return x.BettingList
	}
	return nil
}

func (x *NoticeRoomSituation) GetCardItems() *TableCardsItems {
	if x != nil {
		return x.CardItems
	}
	return nil
}

func (x *NoticeRoomSituation) GetTimeSeconds() *RoomTimeSeconds {
	if x != nil {
		return x.TimeSeconds
	}
	return nil
}

func (x *NoticeRoomSituation) GetNextSeconds() int64 {
	if x != nil {
		return x.NextSeconds
	}
	return 0
}

func (x *NoticeRoomSituation) GetWinner() int32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

func (x *NoticeRoomSituation) GetCowboyCardType() TableCardType {
	if x != nil {
		return x.CowboyCardType
	}
	return TableCardType_CardNone
}

func (x *NoticeRoomSituation) GetBullCardType() TableCardType {
	if x != nil {
		return x.BullCardType
	}
	return TableCardType_CardNone
}

func (x *NoticeRoomSituation) GetWinBettingType() []TableBettingType {
	if x != nil {
		return x.WinBettingType
	}
	return nil
}

func (x *NoticeRoomSituation) GetBigWinPlayer() []*PlayerInfo {
	if x != nil {
		return x.BigWinPlayer
	}
	return nil
}

func (x *NoticeRoomSituation) GetGodOperator() []*PlayerInfo {
	if x != nil {
		return x.GodOperator
	}
	return nil
}

func (x *NoticeRoomSituation) GetSelfInfo() *PlayerInfo {
	if x != nil {
		return x.SelfInfo
	}
	return nil
}

func (x *NoticeRoomSituation) GetBigWinSettles() []*PlayerSettle {
	if x != nil {
		return x.BigWinSettles
	}
	return nil
}

func (x *NoticeRoomSituation) GetGodOperatorSettles() []*PlayerSettle {
	if x != nil {
		return x.GodOperatorSettles
	}
	return nil
}

func (x *NoticeRoomSituation) GetSelfSettle() *PlayerSettle {
	if x != nil {
		return x.SelfSettle
	}
	return nil
}

func (x *NoticeRoomSituation) GetOtherSettle() *PlayerSettle {
	if x != nil {
		return x.OtherSettle
	}
	return nil
}

func (x *NoticeRoomSituation) GetTopList() []int32 {
	if x != nil {
		return x.TopList
	}
	return nil
}

func (x *NoticeRoomSituation) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *NoticeRoomSituation) GetBullPairCancel() bool {
	if x != nil {
		return x.BullPairCancel
	}
	return false
}

func (x *NoticeRoomSituation) GetCanBettingThrow() bool {
	if x != nil {
		return x.CanBettingThrow
	}
	return false
}

func (x *NoticeRoomSituation) GetMaxBetDownTen() int32 {
	if x != nil {
		return x.MaxBetDownTen
	}
	return 0
}

func (x *NoticeRoomSituation) GetMaxBetUpTen() int32 {
	if x != nil {
		return x.MaxBetUpTen
	}
	return 0
}

type TableCardsItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CowboyCards    []*CardItem `protobuf:"bytes,1,rep,name=cowboy_cards,json=cowboyCards,proto3" json:"cowboy_cards,omitempty"`
	BullCards      []*CardItem `protobuf:"bytes,2,rep,name=bull_cards,json=bullCards,proto3" json:"bull_cards,omitempty"`
	CommunityCards []*CardItem `protobuf:"bytes,3,rep,name=community_cards,json=communityCards,proto3" json:"community_cards,omitempty"`
}

func (x *TableCardsItems) Reset() {
	*x = TableCardsItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCardsItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCardsItems) ProtoMessage() {}

func (x *TableCardsItems) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCardsItems.ProtoReflect.Descriptor instead.
func (*TableCardsItems) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{30}
}

func (x *TableCardsItems) GetCowboyCards() []*CardItem {
	if x != nil {
		return x.CowboyCards
	}
	return nil
}

func (x *TableCardsItems) GetBullCards() []*CardItem {
	if x != nil {
		return x.BullCards
	}
	return nil
}

func (x *TableCardsItems) GetCommunityCards() []*CardItem {
	if x != nil {
		return x.CommunityCards
	}
	return nil
}

type CardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Suit   int32 `protobuf:"varint,2,opt,name=suit,proto3" json:"suit,omitempty"`
	IsWin  bool  `protobuf:"varint,3,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"` //是否属于赢牌 0-否 1-是
}

func (x *CardItem) Reset() {
	*x = CardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardItem) ProtoMessage() {}

func (x *CardItem) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardItem.ProtoReflect.Descriptor instead.
func (*CardItem) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{31}
}

func (x *CardItem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CardItem) GetSuit() int32 {
	if x != nil {
		return x.Suit
	}
	return 0
}

func (x *CardItem) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type PlayerSettleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    TableBettingType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.TableBettingType" json:"type,omitempty"` //下注类型
	PayGold int32            `protobuf:"varint,2,opt,name=pay_gold,json=payGold,proto3" json:"pay_gold,omitempty"`           //赔付金额
}

func (x *PlayerSettleItem) Reset() {
	*x = PlayerSettleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettleItem) ProtoMessage() {}

func (x *PlayerSettleItem) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettleItem.ProtoReflect.Descriptor instead.
func (*PlayerSettleItem) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{32}
}

func (x *PlayerSettleItem) GetType() TableBettingType {
	if x != nil {
		return x.Type
	}
	return TableBettingType_EnumNone
}

func (x *PlayerSettleItem) GetPayGold() int32 {
	if x != nil {
		return x.PayGold
	}
	return 0
}

type PlayerSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int32               `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PayGold  int32               `protobuf:"varint,2,opt,name=pay_gold,json=payGold,proto3" json:"pay_gold,omitempty"`
	Rank     int32               `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`                        //排行-结算和下注里面用到-其他不用管
	FromList []*PlayerSettleItem `protobuf:"bytes,4,rep,name=from_list,json=fromList,proto3" json:"from_list,omitempty"` //结算金额来自哪几个单元
}

func (x *PlayerSettle) Reset() {
	*x = PlayerSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSettle) ProtoMessage() {}

func (x *PlayerSettle) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSettle.ProtoReflect.Descriptor instead.
func (*PlayerSettle) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{33}
}

func (x *PlayerSettle) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerSettle) GetPayGold() int32 {
	if x != nil {
		return x.PayGold
	}
	return 0
}

func (x *PlayerSettle) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerSettle) GetFromList() []*PlayerSettleItem {
	if x != nil {
		return x.FromList
	}
	return nil
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head         string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Money        uint64 `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`
	Rank         int32  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                     //排行 富豪榜或者神算子
	BettingMoney int32  `protobuf:"varint,6,opt,name=betting_money,json=bettingMoney,proto3" json:"betting_money,omitempty"` //近20局投注金额
	BettingWins  int32  `protobuf:"varint,7,opt,name=betting_wins,json=bettingWins,proto3" json:"betting_wins,omitempty"`    //近20局获胜次数
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{34}
}

func (x *PlayerInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *PlayerInfo) GetMoney() uint64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PlayerInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PlayerInfo) GetBettingMoney() int32 {
	if x != nil {
		return x.BettingMoney
	}
	return 0
}

func (x *PlayerInfo) GetBettingWins() int32 {
	if x != nil {
		return x.BettingWins
	}
	return 0
}

type NoticeRoomSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid             int32              `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Uuid               uint64             `protobuf:"varint,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BigWinSettles      []*PlayerSettle    `protobuf:"bytes,3,rep,name=big_win_settles,json=bigWinSettles,proto3" json:"big_win_settles,omitempty"`
	GodOperatorSettles []*PlayerSettle    `protobuf:"bytes,4,rep,name=god_operator_settles,json=godOperatorSettles,proto3" json:"god_operator_settles,omitempty"`
	SelfSettle         *PlayerSettle      `protobuf:"bytes,5,opt,name=self_settle,json=selfSettle,proto3" json:"self_settle,omitempty"`
	OtherSettle        *PlayerSettle      `protobuf:"bytes,6,opt,name=other_settle,json=otherSettle,proto3" json:"other_settle,omitempty"`
	SelfInRank         bool               `protobuf:"varint,7,opt,name=self_in_rank,json=selfInRank,proto3" json:"self_in_rank,omitempty"`                                                   //自己是否在排行结算中-富豪榜或者神算子中，不在包含在other_settle，other_settle=other_settle-self_settle
	Winner             int32              `protobuf:"varint,8,opt,name=winner,proto3" json:"winner,omitempty"`                                                                               //获胜方 0-无结果 1-牛仔胜 2-公牛胜 3-平手
	WinBettingType     []TableBettingType `protobuf:"varint,9,rep,packed,name=win_betting_type,json=winBettingType,proto3,enum=protocol.TableBettingType" json:"win_betting_type,omitempty"` //获胜押注单元
	CowboyCardType     TableCardType      `protobuf:"varint,10,opt,name=cowboy_card_type,json=cowboyCardType,proto3,enum=protocol.TableCardType" json:"cowboy_card_type,omitempty"`          //牛仔牌型
	BullCardType       TableCardType      `protobuf:"varint,11,opt,name=bull_card_type,json=bullCardType,proto3,enum=protocol.TableCardType" json:"bull_card_type,omitempty"`                //公牛牌型
	CardItems          *TableCardsItems   `protobuf:"bytes,12,opt,name=card_items,json=cardItems,proto3" json:"card_items,omitempty"`                                                        //发牌信息
}

func (x *NoticeRoomSettle) Reset() {
	*x = NoticeRoomSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeRoomSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeRoomSettle) ProtoMessage() {}

func (x *NoticeRoomSettle) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeRoomSettle.ProtoReflect.Descriptor instead.
func (*NoticeRoomSettle) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{35}
}

func (x *NoticeRoomSettle) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeRoomSettle) GetUuid() uint64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *NoticeRoomSettle) GetBigWinSettles() []*PlayerSettle {
	if x != nil {
		return x.BigWinSettles
	}
	return nil
}

func (x *NoticeRoomSettle) GetGodOperatorSettles() []*PlayerSettle {
	if x != nil {
		return x.GodOperatorSettles
	}
	return nil
}

func (x *NoticeRoomSettle) GetSelfSettle() *PlayerSettle {
	if x != nil {
		return x.SelfSettle
	}
	return nil
}

func (x *NoticeRoomSettle) GetOtherSettle() *PlayerSettle {
	if x != nil {
		return x.OtherSettle
	}
	return nil
}

func (x *NoticeRoomSettle) GetSelfInRank() bool {
	if x != nil {
		return x.SelfInRank
	}
	return false
}

func (x *NoticeRoomSettle) GetWinner() int32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

func (x *NoticeRoomSettle) GetWinBettingType() []TableBettingType {
	if x != nil {
		return x.WinBettingType
	}
	return nil
}

func (x *NoticeRoomSettle) GetCowboyCardType() TableCardType {
	if x != nil {
		return x.CowboyCardType
	}
	return TableCardType_CardNone
}

func (x *NoticeRoomSettle) GetBullCardType() TableCardType {
	if x != nil {
		return x.BullCardType
	}
	return TableCardType_CardNone
}

func (x *NoticeRoomSettle) GetCardItems() *TableCardsItems {
	if x != nil {
		return x.CardItems
	}
	return nil
}

type NoticeRoomBetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid             int32         `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	BigWinPlayer       []*PlayerInfo `protobuf:"bytes,2,rep,name=big_win_player,json=bigWinPlayer,proto3" json:"big_win_player,omitempty"`                    //大赢家用户
	GodOperator        []*PlayerInfo `protobuf:"bytes,3,rep,name=god_operator,json=godOperator,proto3" json:"god_operator,omitempty"`                         //神算子用户
	CowboyBettingLimit int32         `protobuf:"varint,4,opt,name=cowboy_betting_limit,json=cowboyBettingLimit,proto3" json:"cowboy_betting_limit,omitempty"` //牛仔胜单元倍投限制 0-不限制
	BullBettingLimit   int32         `protobuf:"varint,5,opt,name=bull_betting_limit,json=bullBettingLimit,proto3" json:"bull_betting_limit,omitempty"`       //公牛胜单元倍投限制 0-不限制
	CanBettingThrow    bool          `protobuf:"varint,6,opt,name=can_betting_throw,json=canBettingThrow,proto3" json:"can_betting_throw,omitempty"`          //能否续投
}

func (x *NoticeRoomBetting) Reset() {
	*x = NoticeRoomBetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeRoomBetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeRoomBetting) ProtoMessage() {}

func (x *NoticeRoomBetting) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeRoomBetting.ProtoReflect.Descriptor instead.
func (*NoticeRoomBetting) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{36}
}

func (x *NoticeRoomBetting) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeRoomBetting) GetBigWinPlayer() []*PlayerInfo {
	if x != nil {
		return x.BigWinPlayer
	}
	return nil
}

func (x *NoticeRoomBetting) GetGodOperator() []*PlayerInfo {
	if x != nil {
		return x.GodOperator
	}
	return nil
}

func (x *NoticeRoomBetting) GetCowboyBettingLimit() int32 {
	if x != nil {
		return x.CowboyBettingLimit
	}
	return 0
}

func (x *NoticeRoomBetting) GetBullBettingLimit() int32 {
	if x != nil {
		return x.BullBettingLimit
	}
	return 0
}

func (x *NoticeRoomBetting) GetCanBettingThrow() bool {
	if x != nil {
		return x.CanBettingThrow
	}
	return false
}

type RequestBetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32            `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Type   TableBettingType `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.TableBettingType" json:"type,omitempty"`
	Amount int32            `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` //下注金额
}

func (x *RequestBetting) Reset() {
	*x = RequestBetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBetting) ProtoMessage() {}

func (x *RequestBetting) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBetting.ProtoReflect.Descriptor instead.
func (*RequestBetting) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{37}
}

func (x *RequestBetting) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *RequestBetting) GetType() TableBettingType {
	if x != nil {
		return x.Type
	}
	return TableBettingType_EnumNone
}

func (x *RequestBetting) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ResponseBetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  int32            `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Type   TableBettingType `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.TableBettingType" json:"type,omitempty"`
	Amount int32            `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` //下注金额
}

func (x *ResponseBetting) Reset() {
	*x = ResponseBetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBetting) ProtoMessage() {}

func (x *ResponseBetting) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBetting.ProtoReflect.Descriptor instead.
func (*ResponseBetting) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseBetting) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseBetting) GetType() TableBettingType {
	if x != nil {
		return x.Type
	}
	return TableBettingType_EnumNone
}

func (x *ResponseBetting) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NoticeConnectionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason int32 `protobuf:"varint,1,opt,name=Reason,proto3" json:"Reason,omitempty"` //1=client close; 2=time out; 3=broken; 4=other
}

func (x *NoticeConnectionClose) Reset() {
	*x = NoticeConnectionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeConnectionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeConnectionClose) ProtoMessage() {}

func (x *NoticeConnectionClose) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeConnectionClose.ProtoReflect.Descriptor instead.
func (*NoticeConnectionClose) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{39}
}

func (x *NoticeConnectionClose) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type PositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longtitude float32 `protobuf:"fixed32,1,opt,name=longtitude,proto3" json:"longtitude,omitempty"` //经度
	Latitude   float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`     //纬度
	Ip         string  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`                   //ip addr
}

func (x *PositionInfo) Reset() {
	*x = PositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionInfo) ProtoMessage() {}

func (x *PositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionInfo.ProtoReflect.Descriptor instead.
func (*PositionInfo) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{40}
}

func (x *PositionInfo) GetLongtitude() float32 {
	if x != nil {
		return x.Longtitude
	}
	return 0
}

func (x *PositionInfo) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PositionInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type RequestHeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int32         `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Position *PositionInfo `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"` //位置信息
}

func (x *RequestHeartBeat) Reset() {
	*x = RequestHeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeartBeat) ProtoMessage() {}

func (x *RequestHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeartBeat.ProtoReflect.Descriptor instead.
func (*RequestHeartBeat) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{41}
}

func (x *RequestHeartBeat) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RequestHeartBeat) GetPosition() *PositionInfo {
	if x != nil {
		return x.Position
	}
	return nil
}

type ResponseHeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ResponseHeartBeat) Reset() {
	*x = ResponseHeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeartBeat) ProtoMessage() {}

func (x *ResponseHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeartBeat.ProtoReflect.Descriptor instead.
func (*ResponseHeartBeat) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{42}
}

func (x *ResponseHeartBeat) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

//logon
type RequestLogon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Token      string        `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Position   *PositionInfo `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	DeviceInfo string        `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *RequestLogon) Reset() {
	*x = RequestLogon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLogon) ProtoMessage() {}

func (x *RequestLogon) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLogon.ProtoReflect.Descriptor instead.
func (*RequestLogon) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{43}
}

func (x *RequestLogon) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RequestLogon) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequestLogon) GetPosition() *PositionInfo {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RequestLogon) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

type ResponseLogon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`                // 0: success; 1:version not match; 2:uid not-exist; 3:token-failure
	AesKey string `protobuf:"bytes,2,opt,name=aes_key,json=aesKey,proto3" json:"aes_key,omitempty"` //aes私钥
	AesIv  string `protobuf:"bytes,3,opt,name=aes_iv,json=aesIv,proto3" json:"aes_iv,omitempty"`    //aes向量
}

func (x *ResponseLogon) Reset() {
	*x = ResponseLogon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLogon) ProtoMessage() {}

func (x *ResponseLogon) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLogon.ProtoReflect.Descriptor instead.
func (*ResponseLogon) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseLogon) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseLogon) GetAesKey() string {
	if x != nil {
		return x.AesKey
	}
	return ""
}

func (x *ResponseLogon) GetAesIv() string {
	if x != nil {
		return x.AesIv
	}
	return ""
}

type NoticeLoginPlayerJoinRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid        int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	AntiSimulator bool  `protobuf:"varint,2,opt,name=anti_simulator,json=antiSimulator,proto3" json:"anti_simulator,omitempty"`
}

func (x *NoticeLoginPlayerJoinRoom) Reset() {
	*x = NoticeLoginPlayerJoinRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeLoginPlayerJoinRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeLoginPlayerJoinRoom) ProtoMessage() {}

func (x *NoticeLoginPlayerJoinRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeLoginPlayerJoinRoom.ProtoReflect.Descriptor instead.
func (*NoticeLoginPlayerJoinRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{45}
}

func (x *NoticeLoginPlayerJoinRoom) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

func (x *NoticeLoginPlayerJoinRoom) GetAntiSimulator() bool {
	if x != nil {
		return x.AntiSimulator
	}
	return false
}

type RequestJoinRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestJoinRoom) Reset() {
	*x = RequestJoinRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestJoinRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestJoinRoom) ProtoMessage() {}

func (x *RequestJoinRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestJoinRoom.ProtoReflect.Descriptor instead.
func (*RequestJoinRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{46}
}

func (x *RequestJoinRoom) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseJoinRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Roomid int32 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *ResponseJoinRoom) Reset() {
	*x = ResponseJoinRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseJoinRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseJoinRoom) ProtoMessage() {}

func (x *ResponseJoinRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseJoinRoom.ProtoReflect.Descriptor instead.
func (*ResponseJoinRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{47}
}

func (x *ResponseJoinRoom) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ResponseJoinRoom) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type RequestLeaveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid int32 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
}

func (x *RequestLeaveRoom) Reset() {
	*x = RequestLeaveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLeaveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLeaveRoom) ProtoMessage() {}

func (x *RequestLeaveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLeaveRoom.ProtoReflect.Descriptor instead.
func (*RequestLeaveRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{48}
}

func (x *RequestLeaveRoom) GetRoomid() int32 {
	if x != nil {
		return x.Roomid
	}
	return 0
}

type ResponseLeaveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseLeaveRoom) Reset() {
	*x = ResponseLeaveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bull_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLeaveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLeaveRoom) ProtoMessage() {}

func (x *ResponseLeaveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bull_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLeaveRoom.ProtoReflect.Descriptor instead.
func (*ResponseLeaveRoom) Descriptor() ([]byte, []int) {
	return file_bull_proto_rawDescGZIP(), []int{49}
}

func (x *ResponseLeaveRoom) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

var File_bull_proto protoreflect.FileDescriptor

var file_bull_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x28,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x22,
	0xcf, 0x03, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x77,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x57, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62,
	0x75, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x54, 0x77, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x75, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x46, 0x6f, 0x75, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x46, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x61,
	0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x77,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x77, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xe9,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x06,
	0x57, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x0d, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0a, 0x57, 0x69,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x2f, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x22, 0xd6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x62, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0c, 0x67, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x6f, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x5f,
	0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x57,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x67, 0x6f, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x67,
	0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22,
	0x86, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x66, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x09, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x77, 0x62, 0x6f,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x6c,
	0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x6c, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x5f,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x77, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x69,
	0x67, 0x57, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x6f,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x67, 0x6f, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x12, 0x67, 0x6f,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x75, 0x6c, 0x6c, 0x50, 0x61,
	0x69, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x55, 0x70, 0x54,
	0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a,
	0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x62, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4d, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x75, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x5d, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x37, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e,
	0x73, 0x22, 0xf8, 0x04, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x67, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x12, 0x67, 0x6f, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x77, 0x69,
	0x6e, 0x5f, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x77, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xac, 0x02, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x69,
	0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x57, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x6f, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x67, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x77, 0x62, 0x6f, 0x79, 0x5f, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x6f, 0x77, 0x62, 0x6f, 0x79, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62,
	0x75, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x42,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x22, 0x70, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f,
	0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x5a, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x58, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x65, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x5f, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x65, 0x73, 0x49, 0x76, 0x22, 0x5a, 0x0a, 0x19, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x69, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x29,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0xe0, 0x08, 0x0a, 0x05, 0x4d, 0x53,
	0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4d, 0x69, 0x6e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x43, 0x6f, 0x6e, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xa0, 0x9c, 0x01,
	0x12, 0x19, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xa4, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0xa5, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xa6, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xa7,
	0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa8,
	0x9c, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xa9, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xaa, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xab, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x10, 0xac, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x10, 0xad, 0x9c, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xae, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xaf, 0x9c, 0x01, 0x12, 0x20, 0x0a,
	0x1a, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xb0, 0x9c, 0x01, 0x12,
	0x1f, 0x0a, 0x19, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xb1, 0x9c, 0x01,
	0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0xb2, 0x9c, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb3, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xb4, 0x9c, 0x01, 0x12, 0x22, 0x0a,
	0x1c, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xb5, 0x9c,
	0x01, 0x12, 0x23, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xb6, 0x9c, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xb7, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb8, 0x9c, 0x01, 0x12, 0x20, 0x0a,
	0x1a, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xb9, 0x9c, 0x01, 0x12,
	0x21, 0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xba,
	0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0xbb,
	0x9c, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0xbc, 0x9c, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbd, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x10, 0xbe, 0x9c, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x5f, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xbf, 0x9c, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc0, 0x9c, 0x01, 0x2a, 0x57, 0x0a, 0x0d,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x10, 0x03, 0x2a, 0xf2, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e,
	0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d,
	0x43, 0x6f, 0x77, 0x62, 0x6f, 0x79, 0x57, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x75, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x54, 0x77, 0x6f, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x46, 0x6f, 0x75, 0x72,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x46, 0x69, 0x76,
	0x65, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e, 0x64,
	0x54, 0x77, 0x6f, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x6e,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x10, 0x0c, 0x2a, 0xd6, 0x01, 0x0a, 0x0d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x48, 0x69, 0x67, 0x68, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x69, 0x72, 0x54, 0x77, 0x6f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x75, 0x72, 0x64, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x10, 0x0a, 0x2a, 0x50, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0x03, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bull_proto_rawDescOnce sync.Once
	file_bull_proto_rawDescData = file_bull_proto_rawDesc
)

func file_bull_proto_rawDescGZIP() []byte {
	file_bull_proto_rawDescOnce.Do(func() {
		file_bull_proto_rawDescData = protoimpl.X.CompressGZIP(file_bull_proto_rawDescData)
	})
	return file_bull_proto_rawDescData
}

var file_bull_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bull_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_bull_proto_goTypes = []interface{}{
	(MSGID)(0),                        // 0: protocol.MSGID
	(RoomStateType)(0),                // 1: protocol.RoomStateType
	(TableBettingType)(0),             // 2: protocol.TableBettingType
	(TableCardType)(0),                // 3: protocol.TableCardType
	(RoomUserType)(0),                 // 4: protocol.RoomUserType
	(*RequestBettingThrow)(nil),       // 5: protocol.RequestBettingThrow
	(*ResponseBettingThrow)(nil),      // 6: protocol.ResponseBettingThrow
	(*NoticeLeaveRoom)(nil),           // 7: protocol.NoticeLeaveRoom
	(*RequestUserStakeLeft)(nil),      // 8: protocol.RequestUserStakeLeft
	(*ResponseUserStakeLeft)(nil),     // 9: protocol.ResponseUserStakeLeft
	(*NoticeUserKickOut)(nil),         // 10: protocol.NoticeUserKickOut
	(*NoticeUserStakeChange)(nil),     // 11: protocol.NoticeUserStakeChange
	(*StatInfo)(nil),                  // 12: protocol.StatInfo
	(*RequestUserStanding)(nil),       // 13: protocol.RequestUserStanding
	(*ResponseUserStanding)(nil),      // 14: protocol.ResponseUserStanding
	(*StandingUnit)(nil),              // 15: protocol.StandingUnit
	(*StandingStat)(nil),              // 16: protocol.StandingStat
	(*RequestRoomStatistic)(nil),      // 17: protocol.RequestRoomStatistic
	(*ResponseRoomStatistic)(nil),     // 18: protocol.ResponseRoomStatistic
	(*WinCol)(nil),                    // 19: protocol.WinCol
	(*TableCardStat)(nil),             // 20: protocol.TableCardStat
	(*WinCardCol)(nil),                // 21: protocol.WinCardCol
	(*RequestRoomOnlineList)(nil),     // 22: protocol.RequestRoomOnlineList
	(*ResponseRoomOnlineList)(nil),    // 23: protocol.ResponseRoomOnlineList
	(*RequestRoomPlayerList)(nil),     // 24: protocol.RequestRoomPlayerList
	(*ResponseRoomPlayerList)(nil),    // 25: protocol.ResponseRoomPlayerList
	(*NoticeTableBetting)(nil),        // 26: protocol.NoticeTableBetting
	(*TableBettingItem)(nil),          // 27: protocol.TableBettingItem
	(*TableBettingDetail)(nil),        // 28: protocol.TableBettingDetail
	(*RequestRoomSituation)(nil),      // 29: protocol.RequestRoomSituation
	(*ResponseRoomSituation)(nil),     // 30: protocol.ResponseRoomSituation
	(*TableBettingUnit)(nil),          // 31: protocol.TableBettingUnit
	(*RoomTimeSeconds)(nil),           // 32: protocol.RoomTimeSeconds
	(*RoomBookingSheet)(nil),          // 33: protocol.RoomBookingSheet
	(*NoticeRoomSituation)(nil),       // 34: protocol.NoticeRoomSituation
	(*TableCardsItems)(nil),           // 35: protocol.TableCardsItems
	(*CardItem)(nil),                  // 36: protocol.CardItem
	(*PlayerSettleItem)(nil),          // 37: protocol.PlayerSettleItem
	(*PlayerSettle)(nil),              // 38: protocol.PlayerSettle
	(*PlayerInfo)(nil),                // 39: protocol.PlayerInfo
	(*NoticeRoomSettle)(nil),          // 40: protocol.NoticeRoomSettle
	(*NoticeRoomBetting)(nil),         // 41: protocol.NoticeRoomBetting
	(*RequestBetting)(nil),            // 42: protocol.RequestBetting
	(*ResponseBetting)(nil),           // 43: protocol.ResponseBetting
	(*NoticeConnectionClose)(nil),     // 44: protocol.NoticeConnectionClose
	(*PositionInfo)(nil),              // 45: protocol.PositionInfo
	(*RequestHeartBeat)(nil),          // 46: protocol.RequestHeartBeat
	(*ResponseHeartBeat)(nil),         // 47: protocol.ResponseHeartBeat
	(*RequestLogon)(nil),              // 48: protocol.RequestLogon
	(*ResponseLogon)(nil),             // 49: protocol.ResponseLogon
	(*NoticeLoginPlayerJoinRoom)(nil), // 50: protocol.NoticeLoginPlayerJoinRoom
	(*RequestJoinRoom)(nil),           // 51: protocol.RequestJoinRoom
	(*ResponseJoinRoom)(nil),          // 52: protocol.ResponseJoinRoom
	(*RequestLeaveRoom)(nil),          // 53: protocol.RequestLeaveRoom
	(*ResponseLeaveRoom)(nil),         // 54: protocol.ResponseLeaveRoom
}
var file_bull_proto_depIdxs = []int32{
	3,  // 0: protocol.StatInfo.win_card_type:type_name -> protocol.TableCardType
	16, // 1: protocol.ResponseUserStanding.list:type_name -> protocol.StandingStat
	2,  // 2: protocol.StandingUnit.betting_type:type_name -> protocol.TableBettingType
	15, // 3: protocol.StandingStat.standing_list:type_name -> protocol.StandingUnit
	33, // 4: protocol.ResponseRoomStatistic.booking_sheet:type_name -> protocol.RoomBookingSheet
	12, // 5: protocol.ResponseRoomStatistic.stat_info:type_name -> protocol.StatInfo
	3,  // 6: protocol.TableCardStat.win_card_type:type_name -> protocol.TableCardType
	20, // 7: protocol.WinCardCol.list:type_name -> protocol.TableCardStat
	39, // 8: protocol.ResponseRoomOnlineList.online_list:type_name -> protocol.PlayerInfo
	39, // 9: protocol.ResponseRoomPlayerList.big_win_player:type_name -> protocol.PlayerInfo
	39, // 10: protocol.ResponseRoomPlayerList.god_operator:type_name -> protocol.PlayerInfo
	39, // 11: protocol.ResponseRoomPlayerList.self_info:type_name -> protocol.PlayerInfo
	27, // 12: protocol.NoticeTableBetting.big_win_list:type_name -> protocol.TableBettingItem
	27, // 13: protocol.NoticeTableBetting.god_operator_list:type_name -> protocol.TableBettingItem
	27, // 14: protocol.NoticeTableBetting.other_list:type_name -> protocol.TableBettingItem
	27, // 15: protocol.NoticeTableBetting.self_list:type_name -> protocol.TableBettingItem
	28, // 16: protocol.TableBettingItem.bet_list:type_name -> protocol.TableBettingDetail
	2,  // 17: protocol.TableBettingDetail.type:type_name -> protocol.TableBettingType
	2,  // 18: protocol.TableBettingUnit.betting_type:type_name -> protocol.TableBettingType
	21, // 19: protocol.RoomBookingSheet.left_list:type_name -> protocol.WinCardCol
	19, // 20: protocol.RoomBookingSheet.right_list:type_name -> protocol.WinCol
	1,  // 21: protocol.NoticeRoomSituation.state:type_name -> protocol.RoomStateType
	31, // 22: protocol.NoticeRoomSituation.betting_list:type_name -> protocol.TableBettingUnit
	35, // 23: protocol.NoticeRoomSituation.card_items:type_name -> protocol.TableCardsItems
	32, // 24: protocol.NoticeRoomSituation.time_seconds:type_name -> protocol.RoomTimeSeconds
	3,  // 25: protocol.NoticeRoomSituation.cowboy_card_type:type_name -> protocol.TableCardType
	3,  // 26: protocol.NoticeRoomSituation.bull_card_type:type_name -> protocol.TableCardType
	2,  // 27: protocol.NoticeRoomSituation.win_betting_type:type_name -> protocol.TableBettingType
	39, // 28: protocol.NoticeRoomSituation.big_win_player:type_name -> protocol.PlayerInfo
	39, // 29: protocol.NoticeRoomSituation.god_operator:type_name -> protocol.PlayerInfo
	39, // 30: protocol.NoticeRoomSituation.self_info:type_name -> protocol.PlayerInfo
	38, // 31: protocol.NoticeRoomSituation.big_win_settles:type_name -> protocol.PlayerSettle
	38, // 32: protocol.NoticeRoomSituation.god_operator_settles:type_name -> protocol.PlayerSettle
	38, // 33: protocol.NoticeRoomSituation.self_settle:type_name -> protocol.PlayerSettle
	38, // 34: protocol.NoticeRoomSituation.other_settle:type_name -> protocol.PlayerSettle
	36, // 35: protocol.TableCardsItems.cowboy_cards:type_name -> protocol.CardItem
	36, // 36: protocol.TableCardsItems.bull_cards:type_name -> protocol.CardItem
	36, // 37: protocol.TableCardsItems.community_cards:type_name -> protocol.CardItem
	2,  // 38: protocol.PlayerSettleItem.type:type_name -> protocol.TableBettingType
	37, // 39: protocol.PlayerSettle.from_list:type_name -> protocol.PlayerSettleItem
	38, // 40: protocol.NoticeRoomSettle.big_win_settles:type_name -> protocol.PlayerSettle
	38, // 41: protocol.NoticeRoomSettle.god_operator_settles:type_name -> protocol.PlayerSettle
	38, // 42: protocol.NoticeRoomSettle.self_settle:type_name -> protocol.PlayerSettle
	38, // 43: protocol.NoticeRoomSettle.other_settle:type_name -> protocol.PlayerSettle
	2,  // 44: protocol.NoticeRoomSettle.win_betting_type:type_name -> protocol.TableBettingType
	3,  // 45: protocol.NoticeRoomSettle.cowboy_card_type:type_name -> protocol.TableCardType
	3,  // 46: protocol.NoticeRoomSettle.bull_card_type:type_name -> protocol.TableCardType
	35, // 47: protocol.NoticeRoomSettle.card_items:type_name -> protocol.TableCardsItems
	39, // 48: protocol.NoticeRoomBetting.big_win_player:type_name -> protocol.PlayerInfo
	39, // 49: protocol.NoticeRoomBetting.god_operator:type_name -> protocol.PlayerInfo
	2,  // 50: protocol.RequestBetting.type:type_name -> protocol.TableBettingType
	2,  // 51: protocol.ResponseBetting.type:type_name -> protocol.TableBettingType
	45, // 52: protocol.RequestHeartBeat.position:type_name -> protocol.PositionInfo
	45, // 53: protocol.RequestLogon.position:type_name -> protocol.PositionInfo
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_bull_proto_init() }
func file_bull_proto_init() {
	if File_bull_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bull_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBettingThrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBettingThrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeLeaveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUserStakeLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUserStakeLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUserKickOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeUserStakeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUserStanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUserStanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandingUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandingStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRoomStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRoomStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinCol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCardStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinCardCol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRoomOnlineList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRoomOnlineList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRoomPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRoomPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeTableBetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableBettingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableBettingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRoomSituation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRoomSituation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableBettingUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomTimeSeconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBookingSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeRoomSituation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCardsItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeRoomSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeRoomBetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeConnectionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLogon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLogon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeLoginPlayerJoinRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestJoinRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseJoinRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLeaveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bull_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLeaveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bull_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bull_proto_goTypes,
		DependencyIndexes: file_bull_proto_depIdxs,
		EnumInfos:         file_bull_proto_enumTypes,
		MessageInfos:      file_bull_proto_msgTypes,
	}.Build()
	File_bull_proto = out.File
	file_bull_proto_rawDesc = nil
	file_bull_proto_goTypes = nil
	file_bull_proto_depIdxs = nil
}
