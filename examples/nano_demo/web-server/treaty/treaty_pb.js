// source: treaty.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.treaty.BalanceResult', null, global);
goog.exportSymbol('proto.treaty.ChannelMsgRequest', null, global);
goog.exportSymbol('proto.treaty.ChannelMsgResponse', null, global);
goog.exportSymbol('proto.treaty.CodeType', null, global);
goog.exportSymbol('proto.treaty.GameChannel', null, global);
goog.exportSymbol('proto.treaty.LoginRequest', null, global);
goog.exportSymbol('proto.treaty.LoginResponse', null, global);
goog.exportSymbol('proto.treaty.LogoutRequest', null, global);
goog.exportSymbol('proto.treaty.LogoutResponse', null, global);
goog.exportSymbol('proto.treaty.MsgId', null, global);
goog.exportSymbol('proto.treaty.MultiLoginOut', null, global);
goog.exportSymbol('proto.treaty.RpcMsg', null, global);
goog.exportSymbol('proto.treaty.RpcMsgId', null, global);
goog.exportSymbol('proto.treaty.Server', null, global);
goog.exportSymbol('proto.treaty.Session', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.Server = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.Server, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.Server.displayName = 'proto.treaty.Server';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.BalanceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.BalanceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.BalanceResult.displayName = 'proto.treaty.BalanceResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.Session.displayName = 'proto.treaty.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.GameChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.GameChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.GameChannel.displayName = 'proto.treaty.GameChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.MultiLoginOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.MultiLoginOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.MultiLoginOut.displayName = 'proto.treaty.MultiLoginOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.LoginRequest.displayName = 'proto.treaty.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.LoginResponse.displayName = 'proto.treaty.LoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.RpcMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.RpcMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.RpcMsg.displayName = 'proto.treaty.RpcMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.LogoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.LogoutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.LogoutRequest.displayName = 'proto.treaty.LogoutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.LogoutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.LogoutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.LogoutResponse.displayName = 'proto.treaty.LogoutResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.ChannelMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.ChannelMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.ChannelMsgRequest.displayName = 'proto.treaty.ChannelMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treaty.ChannelMsgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treaty.ChannelMsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treaty.ChannelMsgResponse.displayName = 'proto.treaty.ChannelMsgResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.Server.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.Server.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.Server} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.Server.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serverName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverIp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clientPort: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.Server}
 */
proto.treaty.Server.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.Server;
  return proto.treaty.Server.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.Server} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.Server}
 */
proto.treaty.Server.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.Server.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.Server.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.Server} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.Server.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClientPort();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string server_id = 1;
 * @return {string}
 */
proto.treaty.Server.prototype.getServerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.Server} returns this
 */
proto.treaty.Server.prototype.setServerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string server_type = 2;
 * @return {string}
 */
proto.treaty.Server.prototype.getServerType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.Server} returns this
 */
proto.treaty.Server.prototype.setServerType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string server_name = 3;
 * @return {string}
 */
proto.treaty.Server.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.Server} returns this
 */
proto.treaty.Server.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string server_ip = 4;
 * @return {string}
 */
proto.treaty.Server.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.Server} returns this
 */
proto.treaty.Server.prototype.setServerIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 client_port = 5;
 * @return {number}
 */
proto.treaty.Server.prototype.getClientPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.Server} returns this
 */
proto.treaty.Server.prototype.setClientPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.BalanceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.BalanceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.BalanceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.BalanceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connector: (f = msg.getConnector()) && proto.treaty.Server.toObject(includeInstance, f),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f),
    backendPre: (f = msg.getBackendPre()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.BalanceResult}
 */
proto.treaty.BalanceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.BalanceResult;
  return proto.treaty.BalanceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.BalanceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.BalanceResult}
 */
proto.treaty.BalanceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.treaty.CodeType} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setConnector(value);
      break;
    case 3:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    case 4:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackendPre(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.BalanceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.BalanceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.BalanceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.BalanceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConnector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getBackendPre();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional CodeType code = 1;
 * @return {!proto.treaty.CodeType}
 */
proto.treaty.BalanceResult.prototype.getCode = function() {
  return /** @type {!proto.treaty.CodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.treaty.CodeType} value
 * @return {!proto.treaty.BalanceResult} returns this
 */
proto.treaty.BalanceResult.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Server connector = 2;
 * @return {?proto.treaty.Server}
 */
proto.treaty.BalanceResult.prototype.getConnector = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 2));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.BalanceResult} returns this
*/
proto.treaty.BalanceResult.prototype.setConnector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.BalanceResult} returns this
 */
proto.treaty.BalanceResult.prototype.clearConnector = function() {
  return this.setConnector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.BalanceResult.prototype.hasConnector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Server backend = 3;
 * @return {?proto.treaty.Server}
 */
proto.treaty.BalanceResult.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 3));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.BalanceResult} returns this
*/
proto.treaty.BalanceResult.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.BalanceResult} returns this
 */
proto.treaty.BalanceResult.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.BalanceResult.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Server backend_pre = 4;
 * @return {?proto.treaty.Server}
 */
proto.treaty.BalanceResult.prototype.getBackendPre = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 4));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.BalanceResult} returns this
*/
proto.treaty.BalanceResult.prototype.setBackendPre = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.BalanceResult} returns this
 */
proto.treaty.BalanceResult.prototype.clearBackendPre = function() {
  return this.setBackendPre(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.BalanceResult.prototype.hasBackendPre = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connector: (f = msg.getConnector()) && proto.treaty.Server.toObject(includeInstance, f),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.Session}
 */
proto.treaty.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.Session;
  return proto.treaty.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.Session}
 */
proto.treaty.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setConnector(value);
      break;
    case 3:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConnector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.Session.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.Session} returns this
 */
proto.treaty.Session.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Server connector = 2;
 * @return {?proto.treaty.Server}
 */
proto.treaty.Session.prototype.getConnector = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 2));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.Session} returns this
*/
proto.treaty.Session.prototype.setConnector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.Session} returns this
 */
proto.treaty.Session.prototype.clearConnector = function() {
  return this.setConnector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.Session.prototype.hasConnector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Server backend = 3;
 * @return {?proto.treaty.Server}
 */
proto.treaty.Session.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 3));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.Session} returns this
*/
proto.treaty.Session.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.Session} returns this
 */
proto.treaty.Session.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.Session.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.GameChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.GameChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.GameChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.GameChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connector: (f = msg.getConnector()) && proto.treaty.Server.toObject(includeInstance, f),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f),
    createTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reconnectNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reconnectTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.GameChannel}
 */
proto.treaty.GameChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.GameChannel;
  return proto.treaty.GameChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.GameChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.GameChannel}
 */
proto.treaty.GameChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setConnector(value);
      break;
    case 3:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReconnectNum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReconnectTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.GameChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.GameChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.GameChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.GameChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConnector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getReconnectNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getReconnectTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.GameChannel.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Server connector = 2;
 * @return {?proto.treaty.Server}
 */
proto.treaty.GameChannel.prototype.getConnector = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 2));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.GameChannel} returns this
*/
proto.treaty.GameChannel.prototype.setConnector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.clearConnector = function() {
  return this.setConnector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.GameChannel.prototype.hasConnector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Server backend = 3;
 * @return {?proto.treaty.Server}
 */
proto.treaty.GameChannel.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 3));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.GameChannel} returns this
*/
proto.treaty.GameChannel.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.GameChannel.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 create_time = 4;
 * @return {number}
 */
proto.treaty.GameChannel.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 reconnect_num = 5;
 * @return {number}
 */
proto.treaty.GameChannel.prototype.getReconnectNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.setReconnectNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 reconnect_time = 6;
 * @return {number}
 */
proto.treaty.GameChannel.prototype.getReconnectTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.GameChannel} returns this
 */
proto.treaty.GameChannel.prototype.setReconnectTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.MultiLoginOut.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.MultiLoginOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.MultiLoginOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.MultiLoginOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.MultiLoginOut}
 */
proto.treaty.MultiLoginOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.MultiLoginOut;
  return proto.treaty.MultiLoginOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.MultiLoginOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.MultiLoginOut}
 */
proto.treaty.MultiLoginOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.MultiLoginOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.MultiLoginOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.MultiLoginOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.MultiLoginOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.MultiLoginOut.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.MultiLoginOut} returns this
 */
proto.treaty.MultiLoginOut.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.LoginRequest}
 */
proto.treaty.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.LoginRequest;
  return proto.treaty.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.LoginRequest}
 */
proto.treaty.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.LoginRequest.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.LoginRequest} returns this
 */
proto.treaty.LoginRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.treaty.LoginRequest.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.LoginRequest} returns this
 */
proto.treaty.LoginRequest.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.treaty.LoginRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.LoginRequest} returns this
 */
proto.treaty.LoginRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Server backend = 4;
 * @return {?proto.treaty.Server}
 */
proto.treaty.LoginRequest.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 4));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.LoginRequest} returns this
*/
proto.treaty.LoginRequest.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.LoginRequest} returns this
 */
proto.treaty.LoginRequest.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.LoginRequest.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.LoginResponse}
 */
proto.treaty.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.LoginResponse;
  return proto.treaty.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.LoginResponse}
 */
proto.treaty.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.treaty.CodeType} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional CodeType code = 1;
 * @return {!proto.treaty.CodeType}
 */
proto.treaty.LoginResponse.prototype.getCode = function() {
  return /** @type {!proto.treaty.CodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.treaty.CodeType} value
 * @return {!proto.treaty.LoginResponse} returns this
 */
proto.treaty.LoginResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.treaty.LoginResponse.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.LoginResponse} returns this
 */
proto.treaty.LoginResponse.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Server backend = 3;
 * @return {?proto.treaty.Server}
 */
proto.treaty.LoginResponse.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 3));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.LoginResponse} returns this
*/
proto.treaty.LoginResponse.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.LoginResponse} returns this
 */
proto.treaty.LoginResponse.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.LoginResponse.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.RpcMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.RpcMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.RpcMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.RpcMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgServer: (f = msg.getMsgServer()) && proto.treaty.Server.toObject(includeInstance, f),
    msgData: msg.getMsgData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.RpcMsg}
 */
proto.treaty.RpcMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.RpcMsg;
  return proto.treaty.RpcMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.RpcMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.RpcMsg}
 */
proto.treaty.RpcMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.treaty.RpcMsgId} */ (reader.readEnum());
      msg.setMsgId(value);
      break;
    case 2:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setMsgServer(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.RpcMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.RpcMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.RpcMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.RpcMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsgServer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
  f = message.getMsgData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional RpcMsgId msg_id = 1;
 * @return {!proto.treaty.RpcMsgId}
 */
proto.treaty.RpcMsg.prototype.getMsgId = function() {
  return /** @type {!proto.treaty.RpcMsgId} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.treaty.RpcMsgId} value
 * @return {!proto.treaty.RpcMsg} returns this
 */
proto.treaty.RpcMsg.prototype.setMsgId = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Server msg_server = 2;
 * @return {?proto.treaty.Server}
 */
proto.treaty.RpcMsg.prototype.getMsgServer = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 2));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.RpcMsg} returns this
*/
proto.treaty.RpcMsg.prototype.setMsgServer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.RpcMsg} returns this
 */
proto.treaty.RpcMsg.prototype.clearMsgServer = function() {
  return this.setMsgServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.RpcMsg.prototype.hasMsgServer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes msg_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.treaty.RpcMsg.prototype.getMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msg_data = 3;
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {string}
 */
proto.treaty.RpcMsg.prototype.getMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgData()));
};


/**
 * optional bytes msg_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {!Uint8Array}
 */
proto.treaty.RpcMsg.prototype.getMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.treaty.RpcMsg} returns this
 */
proto.treaty.RpcMsg.prototype.setMsgData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.LogoutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.LogoutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.LogoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LogoutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    backend: (f = msg.getBackend()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.LogoutRequest}
 */
proto.treaty.LogoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.LogoutRequest;
  return proto.treaty.LogoutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.LogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.LogoutRequest}
 */
proto.treaty.LogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.LogoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.LogoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.LogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LogoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBackend();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.LogoutRequest.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.LogoutRequest} returns this
 */
proto.treaty.LogoutRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Server backend = 2;
 * @return {?proto.treaty.Server}
 */
proto.treaty.LogoutRequest.prototype.getBackend = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 2));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.LogoutRequest} returns this
*/
proto.treaty.LogoutRequest.prototype.setBackend = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.LogoutRequest} returns this
 */
proto.treaty.LogoutRequest.prototype.clearBackend = function() {
  return this.setBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.LogoutRequest.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.LogoutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.LogoutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.LogoutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LogoutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.LogoutResponse}
 */
proto.treaty.LogoutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.LogoutResponse;
  return proto.treaty.LogoutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.LogoutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.LogoutResponse}
 */
proto.treaty.LogoutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.treaty.CodeType} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.LogoutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.LogoutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.LogoutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.LogoutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CodeType code = 1;
 * @return {!proto.treaty.CodeType}
 */
proto.treaty.LogoutResponse.prototype.getCode = function() {
  return /** @type {!proto.treaty.CodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.treaty.CodeType} value
 * @return {!proto.treaty.LogoutResponse} returns this
 */
proto.treaty.LogoutResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.treaty.LogoutResponse.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.LogoutResponse} returns this
 */
proto.treaty.LogoutResponse.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.ChannelMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.ChannelMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.ChannelMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.ChannelMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rpcMsg: (f = msg.getRpcMsg()) && proto.treaty.RpcMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.ChannelMsgRequest}
 */
proto.treaty.ChannelMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.ChannelMsgRequest;
  return proto.treaty.ChannelMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.ChannelMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.ChannelMsgRequest}
 */
proto.treaty.ChannelMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.treaty.RpcMsg;
      reader.readMessage(value,proto.treaty.RpcMsg.deserializeBinaryFromReader);
      msg.setRpcMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.ChannelMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.ChannelMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.ChannelMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.ChannelMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRpcMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.treaty.RpcMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.treaty.ChannelMsgRequest.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treaty.ChannelMsgRequest} returns this
 */
proto.treaty.ChannelMsgRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional RpcMsg rpc_msg = 2;
 * @return {?proto.treaty.RpcMsg}
 */
proto.treaty.ChannelMsgRequest.prototype.getRpcMsg = function() {
  return /** @type{?proto.treaty.RpcMsg} */ (
    jspb.Message.getWrapperField(this, proto.treaty.RpcMsg, 2));
};


/**
 * @param {?proto.treaty.RpcMsg|undefined} value
 * @return {!proto.treaty.ChannelMsgRequest} returns this
*/
proto.treaty.ChannelMsgRequest.prototype.setRpcMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.ChannelMsgRequest} returns this
 */
proto.treaty.ChannelMsgRequest.prototype.clearRpcMsg = function() {
  return this.setRpcMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.ChannelMsgRequest.prototype.hasRpcMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treaty.ChannelMsgResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treaty.ChannelMsgResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treaty.ChannelMsgResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.ChannelMsgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgData: msg.getMsgData_asB64(),
    connector: (f = msg.getConnector()) && proto.treaty.Server.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treaty.ChannelMsgResponse}
 */
proto.treaty.ChannelMsgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treaty.ChannelMsgResponse;
  return proto.treaty.ChannelMsgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treaty.ChannelMsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treaty.ChannelMsgResponse}
 */
proto.treaty.ChannelMsgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.treaty.CodeType} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgData(value);
      break;
    case 4:
      var value = new proto.treaty.Server;
      reader.readMessage(value,proto.treaty.Server.deserializeBinaryFromReader);
      msg.setConnector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treaty.ChannelMsgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treaty.ChannelMsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treaty.ChannelMsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treaty.ChannelMsgResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConnector();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.treaty.Server.serializeBinaryToWriter
    );
  }
};


/**
 * optional CodeType code = 1;
 * @return {!proto.treaty.CodeType}
 */
proto.treaty.ChannelMsgResponse.prototype.getCode = function() {
  return /** @type {!proto.treaty.CodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.treaty.CodeType} value
 * @return {!proto.treaty.ChannelMsgResponse} returns this
 */
proto.treaty.ChannelMsgResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.treaty.ChannelMsgResponse.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treaty.ChannelMsgResponse} returns this
 */
proto.treaty.ChannelMsgResponse.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes msg_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.treaty.ChannelMsgResponse.prototype.getMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msg_data = 3;
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {string}
 */
proto.treaty.ChannelMsgResponse.prototype.getMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgData()));
};


/**
 * optional bytes msg_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {!Uint8Array}
 */
proto.treaty.ChannelMsgResponse.prototype.getMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.treaty.ChannelMsgResponse} returns this
 */
proto.treaty.ChannelMsgResponse.prototype.setMsgData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Server connector = 4;
 * @return {?proto.treaty.Server}
 */
proto.treaty.ChannelMsgResponse.prototype.getConnector = function() {
  return /** @type{?proto.treaty.Server} */ (
    jspb.Message.getWrapperField(this, proto.treaty.Server, 4));
};


/**
 * @param {?proto.treaty.Server|undefined} value
 * @return {!proto.treaty.ChannelMsgResponse} returns this
*/
proto.treaty.ChannelMsgResponse.prototype.setConnector = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treaty.ChannelMsgResponse} returns this
 */
proto.treaty.ChannelMsgResponse.prototype.clearConnector = function() {
  return this.setConnector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treaty.ChannelMsgResponse.prototype.hasConnector = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.treaty.CodeType = {
  CODESUCCESS: 0,
  CODEFAILED: 1,
  CODECHOOSEBACKENDLOGIN: 2,
  CODELOGINRECONNECT: 3,
  CODECANNOTFINDBACKEND: 4,
  CODEUNDEFINEDDEALMSG: 5,
  CODENOTLOGIN: 6,
  CODENOTRIGHTCONNECTOR: 7,
  CODENOTLOGINBACKEND: 8
};

/**
 * @enum {number}
 */
proto.treaty.MsgId = {
  MSG_NONE: 0,
  MSG_LOGIN_REQUEST: 1,
  MSG_LOGIN_RESPONSE: 2,
  MSG_MULTI_LOGIN_OUT: 3,
  MSG_LOGOUT_REQUEST: 4,
  MSG_LOGOUT_RESPONSE: 5,
  MSG_CHANNEL_REQUEST: 6,
  MSG_CHANNEL_RESPONSE: 7
};

/**
 * @enum {number}
 */
proto.treaty.RpcMsgId = {
  RPCMSGNONE: 0,
  RPCMSGMULTILOGINOUT: 1,
  RPCMSGBACKENDLOGIN: 2,
  RPCMSGBACKENDLOGOUT: 3,
  RPCMSGCHATTEST: 4
};

goog.object.extend(exports, proto.treaty);
